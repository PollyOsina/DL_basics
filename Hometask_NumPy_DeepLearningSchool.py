# -*- coding: utf-8 -*-
"""
Created on Fri Oct 21 02:42:30 2022

@author: Polly
"""

import numpy as np

#Задание 1
# Перемножение матриц
# Напишите две функции, каждая из которых перемножает две квадратные матрицы: 
# одна без использования встроенных функций numpy, а другая --- с помощью numpy.
# На вход первой задаче подаются списки размера size по size элементов в каждом. 
# На вход второй задаче подаются объекты типа np.ndarray --- квадратные матрицы 
# одинакового размера. 

# Первая функция должна возвращать список списков, а вторая -- np.array.

def no_numpy_mult(first, second):
       
    length = len(first) 
    result = [[0 for i in range(length)] for i in range(length)]
    for i in range(length):
      for j in range(length):
        for k in range(length):
           result[i][j] += first[i][k] * second[k][j]
    return result

def numpy_mult(first: np.array, second: np.array):
    result = np.matmul(first, second)
    return result

# Задание 2
# Вам подаются на вход два вектора a и b в трехмерном пространстве. 
# Реализуйте их скалярное произведение с помощью numpy и без. 

def no_numpy_scalar(v1, v2):
    result = 0
    for i, j in zip(v1, v2):
        result += i * j
    return result


def numpy_scalar (v1, v2):
    v1 = np.array(v1)
    v2 = np.array(v2)
    result = v1.dot(v2)
    return result

# Задание 3
# Напишите функцию, которая находит сумму четных элементов на главной диагонали 
# квадратной матрицы (именно чётных элементов, а не элементов на чётных позициях!). 
# Если чётных элементов нет, то вывести 0. Используйте библиотеку numpy.

def diag_2k(a):
    a = np.array(a)
    result = sum(np.diagonal(a)[np.diagonal(a)%2 == 0])
    return result

# Задание 4
# На вход дан двумерный массив X. Напишите функцию, которая для каждой строчки
# x = (x1,x2,...,xn) массива X строит строчку s = (s1,s2,...,sn), где sk = x1+...+xk, 
# а затем выдаёт массив из построенных строчек. Используйте библиотеку numpy 
# (вам поможет функция cumsum). Выходом функции должен быть двумерный массив 
# той же формы, что и X.

def cumsum(A):
    result = np.cumsum(A, axis = 1)
    return result 

# Задание 5
# Пусть дана строчка Х. Необходимо построить новый массив, где все элементы с 
# нечетными индексами требуется заменить на число a (значение по умолчанию a =1).
# Все элементы с четными индексами нужно возвести в куб. Затем записать элементы 
# в обратном порядке относительно их позиций. В конце требуется слить массив xx 
# с преобразованным Х и вернуть на выход функции (естественно, выход должен быть
# numpy-массивом).

# Напишите функцию, которая выполняет данное преобразование для каждой строчки 
# двумерного массива XX. Массив XX при этом должен остаться без изменений.

# x = [[100, 200, 300, 400, 500100,200,300,400,500]] -> 
# [[100, a, 300, a, 500100,a,300,a,500]] -> [[500^3, a, 300^3, a, 100^3]] -> 
# склеиваем [[100, a, 300, a, 500100,a,300,a,500, 500^3, a, 300^3, a, 100^3]]

def transform(X, a=1):
    second = np.copy(X)
    second[:,1::2] = a
    second[:,0::2] = np.power(second[:,0::2], 3)
    second = second[:,::-1]
    result = np.concatenate([X, second], axis = 1 )
    return result

# Задание 6
# С помощью numpy написать функцию для кодирования массива (Run-length encoding).
# Все подряд повторения элементов функция сжимает в один элемент и считает 
# количество повторений. Функция возвращает кортеж из двух numpy-векторов 
# одинаковой длины. Первый содержит элементы, а второй — сколько раз их нужно 
# повторить.
# Пример: encode(np.array([1, 2, 2, 3, 3, 1, 1, 5, 5, 2, 3, 3])) = 
# (np.array([1, 2, 3, 1, 5, 2, 3]), np.array([1, 2, 2, 2, 2, 1, 2]))

def encode(a):

    d = np.diff(a,n=1)
    d = np.insert(d,0,1)
    indexes = np.nonzero(d)
    array1 = a[indexes]
    
    indexes = np.append(indexes,len(a))
    array2 = np.diff(indexes,n=1)
    
    result = (array1, array2)
    return result

